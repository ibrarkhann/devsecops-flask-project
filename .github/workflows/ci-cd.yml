name: DevSecOps CI/CD

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Gitleaks
        run: |
          curl -sSfL https://github.com/zricethezav/gitleaks/releases/download/v8.24.3/gitleaks_8.24.3_linux_x64.tar.gz | tar -xz
          chmod +x gitleaks
          ./gitleaks detect --source=. --verbose --redact --exit-code 1

  build-and-scan:
    runs-on: ubuntu-latest
    needs: gitleaks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/devsecops-flask-project:latest .

      - name: Push Docker Image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/devsecops-flask-project:latest

      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/devsecops-flask-project:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.DEPLOY_HOST }}
          USER: ${{ secrets.DEPLOY_USER }}
          IMAGE: ghcr.io/${{ github.repository_owner }}/devsecops-flask-project:latest
          GHCR_USER: ${{ github.actor }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
        run: |
          ssh -o StrictHostKeyChecking=no $USER@$HOST "
            echo $GHCR_PAT | docker login ghcr.io -u $GHCR_USER --password-stdin && \
            docker pull $IMAGE && \
            docker stop devsecops-flask || true && \
            docker rm devsecops-flask || true && \
            docker run -d -p 5000:5000 --name devsecops-flask $IMAGE
          " 
